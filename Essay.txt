Project is here, Cyber-Security at StarSovu github.
Link: https://github.com/StarSovu/Cyber-Security/tree/master
Project was built by following the Django example mentioned in the cyber security project description.

FLAW 1:
https://github.com/StarSovu/Cyber-Security/blob/ab128edc7b10a3aeaea5b30a685b16506a3d49a1/polls/views.py#L28
Polls/views.py, line 28

Description:
https://owasp.org/Top10/A01_2021-Broken_Access_Control/
On the admin site /admin/ there is a text 'Secrets' on the title. On that word there is a link to /polls/secrets/. That site is supposed to be private for admin, but anyone can get there by typing the path /polls/secrets or clicking on the link on the admin login site.

How to fix it:
Adding a check of user, for example:
if request.user.username == 'admin':
        return render(request, "polls/secrets.html")
return redirect("https://www.youtube.com/watch?v=gvGyS5j9aFY")
A better solution would be to add authentication and give access based on rights and not based on username.

FLAW2:
https://github.com/StarSovu/Cyber-Security/blob/f85c535b710c847436695fde108699b784593c42/mysite/settings.py#L88

Description:
https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/
On the admin site admin can change the password. On this solution password is allowed to be changed to anything, not checking the strength of the password.

How to fix it:
On mysite/settings.py removing the # on the beginning of lines 88-101. Django has the check by default, but it's possible to disable it to simplyfy development. This disabling can be forgotten when publishing the project or it can be left on purpose for some reason.

FLAW3:
https://github.com/StarSovu/Cyber-Security/blob/398f6e57fe08c030c84a4697509318aebd88d5b6/polls/views.py#L39

Description:
https://owasp.org/Top10/A03_2021-Injection/
On the /polls/secrets site user can save a question to the database. I did not manage to get this flaw to 'work', Python and/or Django are not anymore allowing to use '%s'. If that was allowed to use then entering " text ' ), ('wrong time', 'more text " would allow to mess with the times and add several new questions, or of course do something even worse. Even that I did not manage to get this flaw to work I hope I was able to demonstarte how it works. This flaw could also work as an example of Insecure Design, as anyone is able to enter new questions without any authorisation, content or format checking.

How to fix it:
Writing directly to database should be avoided, one should use models instead. Or if writing directly to database the content should always be checked and cleaned.

FLAW4:
https://github.com/StarSovu/Cyber-Security/blob/398f6e57fe08c030c84a4697509318aebd88d5b6/mysite/settings.py#L47
https://github.com/StarSovu/Cyber-Security/blob/ba856a5e0a6d6ada42fe2f922dc036d80e76a53b/polls/templates/polls/secrets.html#L18

Description:
CSFR attack vulnerability. CSFR middleware on Django is disabled and CSFR token not included in POST.

How to fix it:
On the secrets.html template remove <!--  --> (comment tag) around the CSFR token. Enable the middleware by removing # on the settings.py. This is not by far a very good example of CSFR as we are only inputting questions, but of course the content could be something else. It is important to protect all POST actions.


